plugins {
    id "eclipse"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "5.1+"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
}

version = "${mc_version}-${mod_version}"
group = "net.mrscauthd.beyond_earth"
archivesBaseName = "Beyond-Earth"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {

    mappings channel: "official", version: "${mc_version}"
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        client {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", "beyond_earth"
            arg "-mixin.config=beyond_earth.mixin.json"

            mods {
                beyond_earth {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", "beyond_earth"
            arg "-mixin.config=beyond_earth.mixin.json"

            mods {
                beyond_earth {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            property "forge.enabledGameTestNamespaces", "beyond_earth"
            arg "-mixin.config=beyond_earth.mixin.json"

            mods {
                beyond_earth {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            args "--mod", "beyond_earth", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
            arg "-mixin.config=beyond_earth.mixin.json"

            mods {
                beyond_earth {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
    /** JEI */
    maven { name = "Progwml6 maven"; url = "https://dvs1.progwml6.com/files/maven/" }
    maven { name = "ModMaven"; url = "https://modmaven.dev" }
    maven { name = "CurseForge"; url = "https://www.cursemaven.com" }
}

mixin {
    add sourceSets.main, "beyond_earth.mixin-refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    /** MIXIN */
    if (System.getProperty("idea.sync.active") != "true") {
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"
    }

    /** JEI */
    implementation fg.deobf("curse.maven:jei-${version_jei}")

    /** The One Probe */
    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_file}")

    /** Jade */
    implementation fg.deobf("curse.maven:jade-324717:${jade_file}")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "beyond_earth",
                "Specification-Vendor"    : "MrScautHD",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "MrScautHD",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "beyond_earth.mixin.json"
        ])
    }
}

jar.finalizedBy("reobfJar")

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_version: mod_version, mc_version: mc_version, forge_version: forge_version, loader_version: loader_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put "project", project

    filesMatching(resourceTargets) {
        expand replaceProperties
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }
}