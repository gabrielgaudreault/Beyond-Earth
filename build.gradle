plugins {
    id "eclipse"
    id "idea"
    id "maven-publish"
    id "net.minecraftforge.gradle" version "[6.0,6.2)"
    id "org.spongepowered.mixin" version "0.7-SNAPSHOT"
    id "org.parchmentmc.librarian.forgegradle" version "1.+"
}

version = "${mc_version}-${mod_version}"
group = "com.st0x0ef.beyond_earth"
archivesBaseName = "Beyond-Earth"

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

minecraft {
    mappings channel: 'parchment', version: '2023.09.03-1.20.1'
    accessTransformer = file("src/main/resources/META-INF/accesstransformer.cfg")

    runs {
        configureEach {
            workingDirectory project.file("run")
            property "forge.logging.markers", "REGISTRIES"
            property "forge.logging.console.level", "debug"
            arg "-mixin.config=beyond_earth.mixin.json"

            mods {
                beyond_earth {
                    source sourceSets.main
                }
            }
        }

        client {
            property "forge.enabledGameTestNamespaces", "beyond_earth"
        }

        server {
            property "forge.enabledGameTestNamespaces", "beyond_earth"
        }

        gameTestServer {
            property "forge.enabledGameTestNamespaces", "beyond_earth"
        }

        data {
            args "--mod", "beyond_earth", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/")
        }
    }
}

sourceSets.main.resources { srcDir "src/generated/resources" }

repositories {
    mavenCentral()
    maven { name = "ModMaven"; url = "https://modmaven.dev" }
    maven { name = "CurseForge"; url = "https://www.cursemaven.com" }
}

mixin {
    add sourceSets.main, "beyond_earth.mixin-refmap.json"
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"

    /** MIXIN */
    if (System.getProperty("idea.sync.active") != "true")
        annotationProcessor "org.spongepowered:mixin:${mixin_version}:processor"

    /** JEI */
    implementation fg.deobf("curse.maven:jei-${version_jei}")

    /** The One Probe */
    implementation fg.deobf("curse.maven:the-one-probe-245211:${top_file}")

    /** Jade */
    implementation fg.deobf("curse.maven:jade-324717:${jade_file}")

    /** Mekanism */
    implementation fg.deobf("mekanism:Mekanism:${mc_version}-${mekanism_version}")

    //implementation fg.deobf("curse.maven:cyanide-541676:4824162")
}

jar {
    manifest {
        attributes([
                "Specification-Title"     : "beyond_earth",
                "Specification-Vendor"    : "St0x0ef",
                "Specification-Version"   : "1",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${archiveVersion}",
                "Implementation-Vendor"   : "St0x0ef",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "MixinConfigs"            : "beyond_earth.mixin.json"
        ])
    }

    from('LICENSE')
    finalizedBy 'reobfJar'
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/mcmodsrepo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

import groovy.json.JsonSlurper
import groovy.json.JsonOutput

def resourceTargets = ["META-INF/mods.toml", "pack.mcmeta"]
def intoTargets = ["$rootDir/out/production/resources/", "$rootDir/out/production/${project.name}.main/", "$rootDir/bin/main/"]
def replaceProperties = [mod_version: mod_version, mc_version: mc_version, forge_version: forge_version, loader_version: loader_version]
processResources {
    inputs.properties replaceProperties
    replaceProperties.put "project", project

    filesMatching(resourceTargets) {
        expand replaceProperties
        filter {
            it.empty ? null : it
        }
    }

    intoTargets.each { target ->
        if (file(target).exists()) {
            copy {
                from(sourceSets.main.resources) {
                    include resourceTargets
                    expand replaceProperties
                }
                into target
            }
        }
    }

    doLast {
        fileTree(dir: outputs.files.asPath).each {
            var name = it.name
            if (name.endsWith('.json') || name.endsWith('.mcmeta'.)
                it.text = JsonOutput.toJson(new JsonSlurper().parse(it))
        }
    }
}
